import React, { useState } from 'react';
import { useOutletContext } from 'react-router-dom';
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Alert,
  AlertTitle,
  CircularProgress,
  Tooltip,
  Modal,
  Button,
  Card,
  CardContent
} from '@mui/material';
import { Info as InfoIcon, Warning as WarningIcon, OpenInFull as OpenInFullIcon, Close as CloseIcon } from '@mui/icons-material';
import { formatCurrency, formatPercentage } from './common/ProfitCard';
import { BarChart, Bar, XAxis, YAxis, Tooltip as RechartsTooltip, ResponsiveContainer, Cell } from 'recharts';
import { saveAs } from 'file-saver';

function arrayToCSV(data) {
  if (!data.length) return '';
  const headers = Object.keys(data[0]);
  const csvRows = [headers.join(',')];
  for (const row of data) {
    csvRows.push(headers.map(h => JSON.stringify(row[h] ?? '')).join(','));
  }
  return csvRows.join('\n');
}

function downloadCSV(data, filename = 'services.csv') {
  const csv = arrayToCSV(data);
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  saveAs(blob, filename);
}

function ServiceProfitability() {
  const { loading, error, kpiData } = useOutletContext();
  const [expanded, setExpanded] = useState(false);

  // Filter for services only and sort by profit
  const servicesArray = kpiData?.items
    ? kpiData.items
        .filter(item => item.type === 'service')
        .map((item, index) => ({
          id: index.toString(),
          name: item.name,
          quantity: item.quantity,
          sales: item.total_sales,
          cost: item.total_cost,
          profit: item.total_profit,
          profit_margin_percentage: item.profit_margin,
          isAdjusted: false,
          isCostEstimated: true // Services always use estimated costs
        }))
        .sort((a, b) => b.profit - a.profit)
    : [];

  const top5 = servicesArray.slice(0, 5);
  const chartData = top5.map(item => ({ name: item.name, profit: item.profit }));
  const barColors = ['#d1365f', '#f44336', '#ef5350', '#e57373', '#ff8a80'];

  // Tooltip texts for headers
  const tooltips = {
    name: "The name of the service as returned by the Boulevard API.",
    qty: "Total number of times this service was performed in the selected period.",
    sales: "Total sales revenue generated by this service (sum of line item currentSubtotal from Boulevard API).",
    cost: "Total estimated cost for this service. Service costs are estimates based on internal mapping.",
    profit: "Calculated as Total Sales - Total Cost for this service.",
    margin: "Calculated as (Total Profit / Total Sales) * 100 for this service."
  };

  if (error) {
    return (
      <Paper sx={{ p: 3 }}>
        <Alert 
          severity="error"
          icon={<WarningIcon />}
          sx={{ mb: 2 }}
        >
          <AlertTitle>API Error</AlertTitle>
          Unable to load service profitability data.
          <Box component="pre" sx={{ mt: 1, p: 1, bgcolor: 'error.light', borderRadius: 1, fontSize: '0.875rem' }}>
            {typeof error === 'string' ? error : error?.message || 'An unknown error occurred.'}
          </Box>
          <Typography variant="body2" sx={{ mt: 2 }}>
            Please try again later or contact support if the issue persists.
          </Typography>
        </Alert>
      </Paper>
    );
  }

  if (loading) {
    return (
      <Paper sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center', minHeight: 400, justifyContent: 'center' }}>
        <CircularProgress sx={{ mb: 2 }} />
        <Typography>Loading service profitability data...</Typography>
      </Paper>
    );
  }

  if (!servicesArray.length) {
    return (
      <Paper sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center', minHeight: 400, justifyContent: 'center' }}>
        <WarningIcon sx={{ fontSize: 48, color: 'warning.main', mb: 2 }} />
        <Typography variant="h6" gutterBottom>No Services Found</Typography>
        <Typography color="text.secondary">
          No service data was returned by the API for the selected period.
        </Typography>
      </Paper>
    );
  }

  // Table rendering function
  const renderTable = (data, maxHeight = 400) => (
    <TableContainer sx={{ maxHeight, overflowY: 'auto' }}>
      <Table stickyHeader>
        <TableHead>
          <TableRow>
            <TableCell>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                Service Name
                <Tooltip title={tooltips.name}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
            <TableCell align="right">
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                Times Performed
                <Tooltip title={tooltips.qty}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
            <TableCell align="right">
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                Total Sales
                <Tooltip title={tooltips.sales}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
            <TableCell align="right">
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                Total Cost
                <Tooltip title={tooltips.cost}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
            <TableCell align="right">
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                Total Profit
                <Tooltip title={tooltips.profit}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
            <TableCell align="right">
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                Profit Margin
                <Tooltip title={tooltips.margin}>
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {data.map((service) => (
            <TableRow key={service.id} hover>
              <TableCell>{service.name}</TableCell>
              <TableCell align="right">{service.quantity}</TableCell>
              <TableCell align="right">{formatCurrency(service.sales)}</TableCell>
              <TableCell align="right">{formatCurrency(service.cost)}</TableCell>
              <TableCell align="right">{formatCurrency(service.profit)}</TableCell>
              <TableCell align="right">{formatPercentage(service.profit_margin_percentage)}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );

  return (
    <Card sx={{ p: 3, position: 'relative' }}>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h5">Service Profitability</Typography>
          <Box>
            <Button
              variant="outlined"
              size="small"
              startIcon={<OpenInFullIcon />}
              onClick={() => setExpanded(true)}
              sx={{ mr: 1 }}
            >
              Expand
            </Button>
            <Button
              variant="contained"
              size="small"
              onClick={() => downloadCSV(servicesArray)}
            >
              Download CSV
            </Button>
          </Box>
        </Box>
        {/* Bar Chart */}
        <Box sx={{ width: '100%', height: 250, mb: 2 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={chartData} layout="vertical" margin={{ left: 40, right: 20 }}>
              <XAxis type="number" tickFormatter={formatCurrency} />
              <YAxis dataKey="name" type="category" width={120} />
              <RechartsTooltip formatter={formatCurrency} />
              <Bar dataKey="profit" fill="#d1365f">
                {chartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={barColors[index % barColors.length]} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </Box>
        {/* Top 5 Table */}
        {renderTable(top5, 300)}
      </CardContent>
      {/* Expanded Modal */}
      <Modal open={expanded} onClose={() => setExpanded(false)}>
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: '90vw', maxWidth: 900, bgcolor: 'background.paper', boxShadow: 24, borderRadius: 2, p: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
            <Typography variant="h5">All Services</Typography>
            <Box>
              <Button
                variant="contained"
                size="small"
                onClick={() => downloadCSV(servicesArray, 'services.csv')}
                sx={{ mr: 1 }}
              >
                Download CSV
              </Button>
              <IconButton onClick={() => setExpanded(false)}><CloseIcon /></IconButton>
            </Box>
          </Box>
          {/* Bar Chart in Modal */}
          <Box sx={{ width: '100%', height: 250, mb: 2 }}>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={servicesArray.slice(0, 15)} layout="vertical" margin={{ left: 40, right: 20 }}>
                <XAxis type="number" tickFormatter={formatCurrency} />
                <YAxis dataKey="name" type="category" width={120} />
                <RechartsTooltip formatter={formatCurrency} />
                <Bar dataKey="profit" fill="#d1365f">
                  {servicesArray.slice(0, 15).map((entry, index) => (
                    <Cell key={`cell-modal-${index}`} fill={barColors[index % barColors.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </Box>
          {/* Full Table with Scroll */}
          {renderTable(servicesArray, 400)}
        </Box>
      </Modal>
    </Card>
  );
}

export default ServiceProfitability; 